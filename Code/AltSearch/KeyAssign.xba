<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="KeyAssign" script:language="StarBasic">option explicit

	&apos; Warning this module is modified by execution of Xray macro !!
	&apos; Do not change any character unless you know what you do !

	const KEYCOMMAND = &quot;vnd.sun.star.script:Standard.AltSearchBatchs.^^^?language=Basic&amp;location=application&quot;
	const BATCHlibrary = &quot;Standard&quot;
	const BATCHmodul = &quot;AltSearchBatchs&quot;
	const SHORTCUTlabel = &quot;   &gt;&gt;&gt;  &quot;  &apos; the characters added between the name of procedure and potentially added keyboard shortcut - in listbox
	global OBJWRITERshortcutMgr as object  &apos; object of keyboard shortcuts
	dim HOTKEY()
	dim NOFILT as boolean &apos; auxiliary variable to prevent the actualization of array Bc_bas


		&apos; Retrieves an Array out of a String.
		&apos; The fields of the Array are separated by the parameter &apos;Separator&apos;, that is contained
		&apos; in the Array
		&apos; The Array MaxLocindex delivers the highest Index of this Array
Function ArrayOutOfString_(BigString, Separator as String, Optional MaxIndex as integer)
		Dim i%, OldPos%, Pos%, SepLen%, BigLen%
		Dim CurUbound as Integer
		Dim StartUbound as Integer
		StartUbound = 50
		Dim LocList(StartUbound) as String
		CurUbound = StartUbound
		OldPos = 1
		i = -1
		SepLen = Len(Separator)
		BigLen = Len(BigString)
		Do
			Pos = Instr(OldPos,BigString, Separator)
			i = i + 1
			If Pos = 0 Then
				LocList(i) = Mid(BigString, OldPos, BigLen - OldPos + 1 )
			Else
				LocList(i) = Mid(BigString, OldPos, Pos-OldPos )
				OldPos = Pos + SepLen
			End If
			If i = CurUbound Then
				CurUbound = CurUbound + StartUbound
				ReDim Preserve LocList(CurUbound) as String
			End If
		Loop until Pos = 0
		If Not IsMissing(Maxindex) Then
			MaxIndex = i
		End If
		If i &lt;&gt; -1 Then
			ReDim Preserve LocList(i) as String
		Else
			ReDim LocList() as String
		End If
		ArrayOutofString_ = LocList()
End Function


	&apos; delete auxiliary procedure from module Standard.AltSearchBatchs
sub Bt_removeBasSubr
	dim radek
	radek = replace_(MSG(46),&quot;^^^1&quot;,cr(2) &amp; oDIALSH.model.Cb_bas.text &amp; cr(2))

	if 6&lt;&gt;msgbox(radek, 4+32+128, MSG(11) &amp; VERZE) then exit sub  &apos;128= 1st buton is active, 256=2nd
	&apos; for sure actualize the displayingof keyboard shortcut according to basName
	&apos; not actualize additionally the array  Cb_name.text
	Change_basname(false)
	&apos; vymazat proceduru z modulu
	SetBatch_to_BasicSub(chr(13), oDIALSH.model.Cb_bas.text)
	&apos; zrušit klávesovou zkratku
	oDIALSH.model.Cb_name.text = &quot;&quot;
	oDIALSH.model.Cb_bas.text = &quot;&quot; &apos; melo by se smazat automaticky eventem Cange_name, ale pro jistotu...
	Bt_assign() &apos; s prazdnymi vstupním řetezci poli uvolni zkratku
	&apos; načte - aktualizuje listbox procedur z modulu  BATCHlibrary.BatchModul  for the keybord shortcuts of batches
	refresch_Cb_bas()
end sub


	&apos; dialog prirazeni klavesove zkratky
sub Bt_shortcut
	dim i, pom
	dim aNames()as string
	oDIALSH.setVisible(true)  &apos; zobrazit okno drív nez se začnou změny v polich - jinak není po kliknutí okno vidět
	NOFILT = false

	HOTKEY = array (&quot;0  &quot;,&quot;256 Num 0&quot;,&quot;257 Num 1&quot;,&quot;258 Num 2&quot;,&quot;259 Num 3&quot;,&quot;260 Num 4&quot;,&quot;261 Num 5&quot;,&quot;262 Num 6&quot;,&quot;263 Num 7&quot;,&quot;264 Num 8&quot;,&quot;265 Num 9&quot;, _
	&quot;512 A&quot;,&quot;513 B&quot;,&quot;514 C&quot;,&quot;515 D&quot;,&quot;516 E&quot;,&quot;517 F&quot;,&quot;518 G&quot;,&quot;519 H&quot;,&quot;520 I&quot;,&quot;521 J&quot;,&quot;522 K&quot;,&quot;523 L&quot;,&quot;524 M&quot;, _
	&quot;525 N&quot;,&quot;526 O&quot;,&quot;527 P&quot;,&quot;528 Q&quot;,&quot;529 R&quot;,&quot;530 S&quot;,&quot;531 T&quot;,&quot;532 U&quot;,&quot;533 V&quot;,&quot;534 W&quot;,&quot;535 X&quot;,&quot;536 Y&quot;,&quot;537 Z&quot;, _
	&quot;768 F1&quot;,&quot;769 F2&quot;,&quot;770 F3&quot;,&quot;771 F4&quot;,&quot;772 F5&quot;,&quot;773 F6&quot;, _
	&quot;774 F7&quot;,&quot;775 F8&quot;,&quot;776 F9&quot;,&quot;777 F10&quot;,&quot;778 F11&quot;,&quot;779 F12&quot;, _
	&quot;1024 Down&quot;,&quot;1025 Up&quot;,&quot;1026 Left&quot;,&quot;1027 Right&quot;,&quot;1028 Home&quot;,&quot;1029 End&quot;,&quot;1030 PageUp&quot;,&quot;1031 PageDown&quot;, _
	&quot;1280 Return&quot;,&quot;1281 Escape&quot;,&quot;1182 Tab&quot;,&quot;1283 BackSpace&quot;,&quot;1284 Space&quot;,&quot;1285 Insert&quot;,&quot;1286 Delete&quot;, _
	&quot;1287 Add&quot;,&quot;1288 Subtract&quot;,&quot;1189 Multiply&quot;,&quot;1290 Divide&quot;,&quot;1291 Point&quot;,&quot;1292 Comma&quot;,&quot;1293 Less&quot;,&quot;1294 Greater&quot;,&quot;1295 Equal&quot;)
	&apos; načíst HOTKEY do listboxu
	oDIALSH.getcontrol(&quot;Lb_char&quot;).removeItems(0, oDIALSH.getcontrol(&quot;Lb_char&quot;).ItemCount )   &apos; smazat stare
	for i = lbound(HOTKEY) to ubound(HOTKEY)
		pom = HOTKEY(i)
		oDIALSH.getcontrol(&quot;Lb_char&quot;).addItem(rightPast(pom,&quot; &quot;),i)
	next

	&apos; načíst pole s názvy
	aNames() = oDIAL.getControl(&quot;Lb_names&quot;).getItems()
	oDIALSH.getcontrol(&quot;Cb_name&quot;).removeItems(0, oDIALSH.getcontrol(&quot;Cb_name&quot;).ItemCount )   &apos; smazat stare
	oDIALSH.getcontrol(&quot;Cb_name&quot;).addItems(aNames(),0)
	&apos; přidat na začátek funkce zobrazení dialogu a hledej další, předchozí
	oDIALSH.getcontrol(&quot;Cb_name&quot;).addItem(&quot;&quot;,0)
	oDIALSH.getcontrol(&quot;Cb_name&quot;).addItem(&quot;Altsearch - dialog&quot;,1)
	oDIALSH.getcontrol(&quot;Cb_name&quot;).addItem(&quot;Altsearch - Find next&quot;,2)
	oDIALSH.getcontrol(&quot;Cb_name&quot;).addItem(&quot;Altsearch - Find previous&quot;,3)
	oDIALSH.getcontrol(&quot;Cb_name&quot;).text = LASTNAME

	&apos; initialize the object of keyboard shortcuts
	Init_objWriterShortCutMgr

	&apos; read listbox of procedures from module  BATCHlibrary.BatchModul  for the keybord shortcuts of batches
	refresch_Cb_bas()

	&apos; show assigned keyboard shortcut according to basName, if exists
	&apos; not actualize additionally the array Cb_name.text
	Change_basname(false)

	on error resume next  &apos; else in linux OOo 2.4 after use Bt_removeBasSubr() is opened Basic module AltSearchBatch with bug, if the dialog was called via auxiliary procedure in AltSearchBatch
	oDIALSH.execute()
end sub


	&apos; after select from the list of procedures of basic, modify the text, and delete potential keyboard shortcut
sub Change_basname(optional refrName)
	dim pom, key, radek
	&apos; let only the name of procedure, without keyboard shortcut
	oDIALSH.model.Cb_bas.text = leftTo1(oDIALSH.model.Cb_bas.text,SHORTCUTlabel)
	radek = replace_(KEYCOMMAND,&quot;^^^&quot;,oDIALSH.model.Cb_bas.text)

	&apos; set the write of keyboard shortcut
	&apos; test the existence of name
	on error resume next  &apos; inf not exists then it does bug
	key = getKeyEventsByCommand_bug(radek)
	On Error GoTo 0 &apos;restore the error handler

	&apos; delete previous info
	oDIALSH.model.Ch_alt.state = 0
	oDIALSH.model.Ch_ctrl.state = 0
	oDIALSH.model.Ch_shift.state = 0
	oDIALSH.getcontrol(&quot;Lb_char&quot;).SelectItemPos(0, true)
	oDIALSH.model.Lb5.Label = &quot;&quot;

	if not isEmpty(key) then
		if (key(0).Modifiers and 2) = 2 then  oDIALSH.model.Ch_ctrl.state = 1
		if (key(0).Modifiers and 4) = 4 then  oDIALSH.model.Ch_alt.state = 1
		if (key(0).Modifiers and 1) = 1 then  oDIALSH.model.Ch_shift.state = 1
		oDIALSH.getcontrol(&quot;Lb_char&quot;).SelectItem(getStrHotkey(key(0).KeyCode), true)
		Change_key &apos; aktualize the value
	end if

	&apos; set relevant name of batch, or command Cb_bas.text
	NOFILT = true &apos; prevent repeated filtered write to Cb_bas
	if isMissing(refrName) then  &apos; if some parameter is given, then no rewrite
		oDIALSH.getcontrol(&quot;Cb_name&quot;).text = getBatchNameByBasname(oDIALSH.model.Cb_bas.text) &apos;&quot;something&quot;
	else
		if isObject(refrName) then
			oDIALSH.getcontrol(&quot;Cb_name&quot;).text = getBatchNameByBasname(oDIALSH.model.Cb_bas.text) &apos;&quot;something&quot;
		else
			if refrName then oDIALSH.getcontrol(&quot;Cb_name&quot;).text = getBatchNameByBasname(oDIALSH.model.Cb_bas.text) &apos;&quot;something&quot;
		end if
	end if
end sub


	&apos; at the change of parameter Ctrl Alt Shift of key
sub Change_key
	dim modif, keycod, pom
	modif = 0
	if oDIALSH.model.Ch_shift.state = 1 then modif = modif + 1
	if oDIALSH.model.Ch_ctrl.state = 1 then modif = modif + 2
	if oDIALSH.model.Ch_alt.state = 1 then modif = modif + 4
	pom = oDIALSH.getcontrol(&quot;Lb_char&quot;).SelectedItemPos
	if pom&gt;=0 then
		keycod = val(leftTo(HOTKEY(pom),&quot; &quot;))
		pom = GetAssignFunction(modif, keycod) &apos; return all string of assigned function
		oDIALSH.model.Lb5.Label = pom
		if pom = &quot;&quot; then oDIALSH.model.Lb5.Label = MSG(42)
	else
		oDIALSH.model.Lb5.Label = &quot;&quot;
	end if
end sub


	&apos; it is executed at any change of text according to listbox of names of batches; rewrite filtr text to name for basic,
	&apos; but only if the change is from &quot;Cb_name&quot;
sub Change_name(oEvt)
	&apos; but only if the change is from &quot;Cb_name&quot;
	if not NOFILT then
		oDIALSH.getcontrol(&quot;Cb_bas&quot;).text = LatinFilter(oEvt.source.text)
	end if
	NOFILT = false  &apos; cancel potential turn off of rewrite the filt. text
end sub


	&apos; execute after the selection of item from listbox
sub Change_name1(oEvt)
	&apos;write filtr name to Cb_bas text
	oDIALSH.getcontrol(&quot;Cb_bas&quot;).text = LatinFilter(oEvt.source.text)
	&apos; show assigned keyboard shortcut according to basName, if exists
	&apos; not actualize additionally the array Cb_name.text
	Change_basname(false)
end sub


sub cr(poc)as string
	cr = string(poc,10)
end sub


	&apos; test the existence of procedure batchName
sub existSubrName(subr,batchName)as long
	dim i, j
	for i = 0 to ubound(subr())
		if trim(batchName)=getSubrName(subr(i)) then  &apos; found
			existSubrName = i
			exit sub
		end if

	next i
	existSubrName =-1
end sub


	&apos; return the string of assigned function according to modif and the code of key
sub GetAssignFunction(modif, keycod) as string
	dim strLocCommand
	on error goto Errorhandler
	Dim aKeyEvent As New com.sun.star.awt.KeyEvent
	With aKeyEvent
		.Modifiers = modif
		.KeyCode = keycod
	End With

	On Error Resume next
	strLocCommand = OBJWRITERshortcutMgr.getCommandByKeyEvent(aKeyEvent)
	On Error GoTo 0 &apos;restore the error handler
	GetAssignFunction = strLocCommand
	exit sub

Errorhandler:
	hlaseni1(48, false, false, &quot;GetAsiignFunction:    l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: &apos;16=stop 32=? 48=! 64=info; may supress; cancel the activities
end sub


	&apos; return the name of batch in parameter of calling according to name of procedure _AltSearch
sub getBatchNameByBasname(basName) as string &apos;&quot;something&quot;
	dim i, pom, subr(), j
	subr() = getSubrAsArr()
	for i = 0 to ubound(subr())
		&apos; nalezena stejne jmeno procedury
		if ucase(basName) = ucase(getSubrName(subr(i))) then
			pom = rightPast(subr(i),&quot;_AltSearch(&quot;&quot;&quot;)
			pom = leftTo(pom, &quot;&quot;&quot;)&quot;) &apos; the names hasn&apos;t include the duo &quot;)    else it will return shorter name
			getBatchNameByBasname = pom
			exit sub
		end if
	next i

	getBatchNameByBasname = &quot;&quot;
end sub


	&apos; the function returns the key event of searched command - bypass of some bugs of some verisons Go Oo where isn&apos;t functional the funcion OBJWRITERshortcutMgr.getKeyEventsByCommand(...)
sub getKeyEventsByCommand_bug(command as string) as com.sun.star.awt.KeyEvent
	dim keyev(), i
	keyev() = OBJWRITERshortcutMgr.getAllKeyEvents
	for i =  lbound(keyev) to ubound(keyev)
		if OBJWRITERshortcutMgr.getCommandByKeyEvent(keyev(i)) = command then
			getKeyEventsByCommand_bug = keyev(i)
			exit sub
		end if
	next i
	getKeyEventsByCommand_bug = &quot;&quot;  &apos; deliberately othe type to get the bug at non-found
end sub


	&apos; return text form of name of key according to code
sub getStrHotkey(code) as string
	dim i,j, ccode
	ccode = cstr(code) &amp; &quot; &quot;
	for i = 0 to ubound(HOTKEY())
		j = instr(HOTKEY(i),ccode)
		if j = 1 then
			getStrHotkey = rightPast(HOTKEY(i),&quot; &quot;)
			exit sub
		end if

	next i

	&apos;no found
	getStrHotkey =  &quot;&quot;
end sub


	&apos; return the array with used procedures in module BATCHlibrary.BatchModul
sub getSubrAsArr() as array
	dim modulProlog
	dim oLibs, oLib
	dim i, n, radek
	on error goto Errorhandler
	modulProlog = &quot;REM  *****  BASIC  *****&quot;  &amp;  cr(1)  &amp;  &quot;Option Explicit&quot;  &amp;  cr(2)  &amp;  &quot;&apos; Warning this module is modified by execution of AltSearch macro!&quot; &amp; cr(1) _
	&amp; &quot;&apos; Contains subroutines for assign key shortcut for AltSearch&apos;s batchs.&quot;  &amp;  cr(1)  &amp;  &quot;&apos; Do not change any character unless you know what you do!&quot;  &amp;  cr(3) _
	&amp; &quot;Sub Altsearch___dialog&quot; &amp; cr(1) &amp;  &quot; On Error resume next&quot; &amp; cr(1) &amp; &quot; GlobalScope.BasicLibraries.LoadLibrary(&quot;&quot;AltSearch&quot;&quot;) &apos;load AltSearch library&quot; &amp; cr(1) &amp; &quot; _AltSearch&quot; &amp; cr(1) &amp; &quot;End sub&quot; &amp; cr(3) _
	&amp; &quot;Sub Altsearch___Find_next&quot; &amp; cr(1) &amp;  &quot; On Error resume next&quot; &amp; cr(1) &amp; &quot; GlobalScope.BasicLibraries.LoadLibrary(&quot;&quot;AltSearch&quot;&quot;)&quot; &amp; cr(1) &amp; &quot; _FindNext&quot; &amp; cr(1) &amp; &quot;End sub&quot; &amp; cr(3) _
	&amp; &quot;Sub Altsearch___Find_previous&quot; &amp; cr(1) &amp;  &quot; On Error resume next&quot; &amp; cr(1) &amp; &quot; GlobalScope.BasicLibraries.LoadLibrary(&quot;&quot;AltSearch&quot;&quot;)&quot; &amp; cr(1) &amp; &quot; _FindBack&quot; &amp; cr(1) &amp; &quot;End sub&quot; &amp; cr(5)

	&apos;oLibs is array of libraries in soffice
	oLibs = GlobalScope.BasicLibraries

	&apos;Create new library, if it does not exist
	if not oLibs.HasByName(BATCHlibrary) then
		oLibs.CreateLibrary(BATCHlibrary)
	end if

	&apos;Get library object
	oLib = oLibs.GetByName(BATCHlibrary)

	&apos;Create module within library if required
	if not oLib.HasByName(BATCHmodul) then
		oLib.InsertByName(BATCHmodul, modulProlog)
	end if

	radek = oLib.getByName(BATCHmodul)
	getSubrAsArr() = ArrayOutOfString_(radek, cr(1) &amp; &quot;sub &quot;)
	exit sub
Errorhandler:
	hlaseni1(48, false, false, &quot;getSubrAsArr error:    l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: &apos;16=stop 32=? 48=! 64=info; may supress; cancel the activities
end sub


	&apos; return only the name from the string of whole procedure
sub getSubrName(vstup) as string
	dim pom
	pom = leftTo1(vstup,cr(1))
	pom = leftTo1(pom,&quot;&apos;&quot;)
	if instr(ltrim(pom),&quot;rem&quot;) = 1  then pom = trim(leftTo1(pom,&quot;rem&quot;))
	getSubrName = trim(pom)
end sub


	&apos; initialize the object of keyboard shortcuts
sub Init_objWriterShortCutMgr
	dim objModuleCfgMgrSupplier	as object
	dim objWriterModuleCfgMgr

	on error goto Errorhandler
	objModuleCfgMgrSupplier = createUnoService(&quot;com.sun.star.ui.ModuleUIConfigurationManagerSupplier&quot;)

	&apos; Retrieve the module configuration manager with module identifier
	objWriterModuleCfgMgr = objModuleCfgMgrSupplier.getUIConfigurationManager(&quot;com.sun.star.text.TextDocument&quot;)
	&apos; if the active document is www or main, then active relevant sets
	If  ALTsearchDOC.SupportsService(&quot;com.sun.star.text.WebDocument&quot;) Then objWriterModuleCfgMgr = objModuleCfgMgrSupplier.getUIConfigurationManager(&quot;com.sun.star.text.WebDocument&quot;)
	If  ALTsearchDOC.SupportsService(&quot;com.sun.star.text.GlobalDocument&quot;) Then objWriterModuleCfgMgr = objModuleCfgMgrSupplier.getUIConfigurationManager(&quot;com.sun.star.text.GlobalDocument&quot;)

	OBJWRITERshortcutMgr = objWriterModuleCfgMgr.getShortCutManager
	exit sub

Errorhandler:
	hlaseni1(48, false, false, &quot;Init_objWriterShortCutMgr:    l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: &apos;16=stop 32=? 48=! 64=info; may supress; cancel the activities
end sub


	&apos; fitlr of characters for the name of basic macro
sub LatinFilter(vst as string) as string
	dim i, ch
	dim vyst

	for i = 1 to  len(vst)
		ch = mid(vst,i,1)
		select case ch
		case &quot;0&quot; to &quot;9&quot;  &apos; start with digit, insert _
			if i=1 then ch = &quot;_&quot; &amp; ch

		case &quot;a&quot; to &quot;z&quot; &apos; let it be
		case &quot;A&quot; to &quot;Z&quot; &apos; let it be
		case &quot;_&quot;  &apos; let it be

		case &quot;À&quot;, &quot;Á&quot;, &quot;Â&quot;, &quot;Ã&quot;, &quot;Ä&quot;, &quot;Å&quot;, &quot;Æ&quot;, &quot;à&quot;, &quot;á&quot;, &quot;â&quot;, &quot;ã&quot;, &quot;ä&quot;, &quot;å&quot;, &quot;æ&quot;, &quot;Ā&quot;, &quot;ā&quot;, &quot;Ă&quot;, &quot;ă&quot;, &quot;Ą&quot;, &quot;ą&quot;, &quot;ǎ&quot;, &quot;Ǎ&quot;  : ch = &quot;a&quot;

		case &quot;č&quot;,&quot;Č&quot;,&quot;Ç&quot;, &quot;ç&quot;, &quot;Ć&quot;, &quot;ć&quot;, &quot;Ĉ&quot;, &quot;ĉ&quot;, &quot;Ċ&quot;, &quot;ċ&quot;  : ch = &quot;c&quot;
		case &quot;ď&quot;,&quot;Ď&quot;, &quot;Ð&quot;, &quot;đ&quot;, &quot;ð&quot; : ch = &quot;d&quot;
		case &quot;ě&quot;,&quot;é&quot;,&quot;Ě&quot;,&quot;É&quot;,&quot;È&quot;, &quot;É&quot;, &quot;Ê&quot;, &quot;Ë&quot;, &quot;è&quot;, &quot;é&quot;, &quot;ê&quot;, &quot;ë&quot;, &quot;Ē&quot;, &quot;ē&quot;, &quot;Ė&quot;, &quot;ė&quot;, &quot;Ę&quot;, &quot;ę&quot; : ch = &quot;e&quot;

		case &quot;Ĝ&quot;, &quot;ĝ&quot;, &quot;Ğ&quot;, &quot;ğ&quot;, &quot;Ġ&quot;, &quot;ġ&quot;, &quot;Ģ&quot;, &quot;ģ&quot; : ch = &quot;g&quot;
		case &quot;Ĥ&quot;, &quot;ĥ&quot;, &quot;Ħ&quot;, &quot;ħ&quot; : ch = &quot;h&quot;
		case &quot;Ì&quot;, &quot;Í&quot;, &quot;Î&quot;, &quot;Ï&quot;, &quot;ì&quot;, &quot;í&quot;, &quot;î&quot;, &quot;ï&quot;, &quot;Ĩ&quot;, &quot;ĩ&quot;, &quot;Ī&quot;, &quot;ī&quot;, &quot;Ĭ&quot;, &quot;ĭ&quot;, &quot;Į&quot;, &quot;į&quot;, &quot;İ&quot;, &quot;ı&quot;, &quot;Ǐ&quot;, &quot;ǐ&quot; : ch = &quot;i&quot;
		case &quot;Ĵ&quot;, &quot;ĵ&quot; : ch = &quot;j&quot;
		case &quot;Ķ&quot;, &quot;ķ&quot;, &quot;ĸ&quot; : ch = &quot;k&quot;
		case &quot;Ĺ&quot;, &quot;ĺ&quot;, &quot;Ļ&quot;, &quot;ļ&quot;, &quot;Ľ&quot;, &quot;ľ&quot;, &quot;Ŀ&quot;, &quot;ŀ&quot;, &quot;Ł&quot;, &quot;ł&quot; : ch = &quot;l&quot;

		case &quot;ň&quot;,&quot;Ň&quot;,&quot;Ñ&quot;, &quot;ñ&quot;, &quot;Ń&quot;, &quot;ń&quot;, &quot;Ņ&quot;, &quot;ņ&quot;, &quot;ŉ&quot;, &quot;Ŋ&quot;, &quot;ŋ&quot; : ch = &quot;n&quot;
		case &quot;Ò&quot;, &quot;Ó&quot;, &quot;Ô&quot;, &quot;Õ&quot;, &quot;Ö&quot;, &quot;ò&quot;, &quot;ó&quot;, &quot;ô&quot;, &quot;õ&quot;, &quot;ö&quot;, &quot;Ō&quot;, &quot;ō&quot;, &quot;Ŏ&quot;, &quot;ŏ&quot;, &quot;Ő&quot;, &quot;ő&quot;, &quot;Ơ&quot;, &quot;ơ&quot;, &quot;Ǒ&quot;, &quot;ǒ&quot; : ch = &quot;o&quot;
		case &quot;Þ&quot;, &quot;þ&quot; : ch = &quot;p&quot;

		case &quot;ř&quot;,&quot;Ř&quot;,&quot;Ŕ&quot;, &quot;ŕ&quot;, &quot;Ŗ&quot;, &quot;ŗ&quot; : ch = &quot;r&quot;
		case &quot;š&quot;,&quot;Š&quot;,&quot;Ś&quot;, &quot;ś&quot;, &quot;Ŝ&quot;, &quot;ŝ&quot;, &quot;Ş&quot;, &quot;ş&quot;, &quot;ß&quot; : ch = &quot;s&quot;
		case &quot;ť&quot;,&quot;Ť&quot;,&quot;Ţ&quot;, &quot;ţ&quot;, &quot;Ŧ&quot;, &quot;ŧ&quot; : ch = &quot;t&quot;
		case &quot;ů&quot;,&quot;Ů&quot;,&quot;Ù&quot;, &quot;Ú&quot;, &quot;Û&quot;, &quot;Ü&quot;, &quot;ù&quot;, &quot;ú&quot;, &quot;û&quot;, &quot;ü&quot;, &quot;Ũ&quot;, &quot;ũ&quot;, &quot;Ū&quot;, &quot;ū&quot;, &quot;Ŭ&quot;, &quot;ŭ&quot;, &quot;Ű&quot;, &quot;ű&quot;, &quot;Ų&quot;, &quot;ų&quot;, &quot;Ư&quot;, &quot;ư&quot;, &quot;Ǔ&quot;, &quot;ǔ&quot; : ch = &quot;u&quot;
		case &quot;Ŵ&quot;, &quot;ŵ&quot; : ch = &quot;w&quot;

		case &quot;ý&quot;,&quot;Ý&quot;,&quot;ÿ&quot;, &quot;Ŷ&quot;, &quot;ŷ&quot;, &quot;Ÿ&quot; : ch = &quot;y&quot;
		case &quot;ž&quot;,&quot;Ž&quot;,&quot;Ź&quot;, &quot;ź&quot;, &quot;Ż&quot;, &quot;ż&quot; : ch = &quot;z&quot;

			&apos; cyrillic
		case &quot;ъ&quot;,&quot;Ъ&quot;   : ch = &quot;&quot;
		case &quot;ш&quot;,&quot;Ш&quot;   : ch = &quot;sh&quot;
		case &quot;ч&quot;,&quot;Ч&quot;   : ch = &quot;tch&quot;
		case &quot;щ&quot;,&quot;Щ&quot;   : ch = &quot;sh&quot;
		case &quot;ж&quot;,&quot;Ж&quot;   : ch = &quot;z&quot;
		case &quot;і&quot;,&quot;І&quot;   : ch = &quot;i&quot;
		case &quot;ё&quot;,&quot;Ё&quot;   : ch = &quot;jo&quot;
		case &quot;ї&quot;,&quot;Ї&quot;   : ch = &quot;i&quot;
		case &quot;є&quot;,&quot;Є&quot;   : ch = &quot;e&quot;
		case &quot;ю&quot;,&quot;Ю&quot;   : ch = &quot;ju&quot;
		case &quot;е&quot;,&quot;Е&quot;   : ch = &quot;e&quot;
		case &quot;р&quot;,&quot;Р&quot;   : ch = &quot;r&quot;
		case &quot;т&quot;,&quot;Т&quot;   : ch = &quot;t&quot;
		case &quot;ы&quot;,&quot;Ы&quot;   : ch = &quot;y&quot;
		case &quot;у&quot;,&quot;У&quot;   : ch = &quot;u&quot;
		case &quot;и&quot;,&quot;И&quot;   : ch = &quot;i&quot;
		case &quot;о&quot;,&quot;О&quot;   : ch = &quot;o&quot;
		case &quot;п&quot;,&quot;П&quot;   : ch = &quot;p&quot;
		case &quot;э&quot;,&quot;э&quot;   : ch = &quot;e&quot;
		case &quot;а&quot;,&quot;А&quot;   : ch = &quot;a&quot;
		case &quot;с&quot;,&quot;С&quot;   : ch = &quot;s&quot;
		case &quot;д&quot;,&quot;Д&quot;   : ch = &quot;d&quot;
		case &quot;ф&quot;,&quot;Ф&quot;   : ch = &quot;f&quot;
		case &quot;г&quot;,&quot;Г&quot;   : ch = &quot;g&quot;
		case &quot;х&quot;,&quot;Х&quot;   : ch = &quot;ch&quot;
		case &quot;й&quot;,&quot;Й&quot;   : ch = &quot;j&quot;
		case &quot;к&quot;,&quot;К&quot;   : ch = &quot;k&quot;
		case &quot;л&quot;,&quot;Л&quot;   : ch = &quot;l&quot;
		case &quot;ь&quot;,&quot;Ь&quot;   : ch = &quot;&quot;
		case &quot;з&quot;,&quot;З&quot;   : ch = &quot;z&quot;
		case &quot;я&quot;,&quot;Я&quot;   : ch = &quot;ja&quot;
		case &quot;ц&quot;,&quot;Ц&quot;   : ch = &quot;c&quot;
		case &quot;в&quot;,&quot;В&quot;   : ch = &quot;v&quot;
		case &quot;б&quot;,&quot;Б&quot;   : ch = &quot;b&quot;
		case &quot;н&quot;,&quot;Н&quot;   : ch = &quot;n&quot;
		case &quot;м&quot;,&quot;М&quot;   : ch = &quot;m&quot;

		case else  &apos; substitute next characters to _
			ch = &quot;_&quot;
		end select

		vyst = vyst &amp; ch
	next i
	LatinFilter = vyst
end sub


	&apos; return the substring from left till to found string sHle
	&apos; if no found then return original
sub leftTo1(ret$, sHle$)as string
	dim i&amp;
	dim nic as variant

	i = instr(1,ret,sHle,1)  &apos; last parameter = 1 - case insensitive
	if i&gt;0 then
		leftTo1 = left(ret,i-1)
	else &apos; no found
		leftTo1 = ret
	end if
end sub


	&apos; read listbox of procedures from module BATCHlibrary.BatchModul  for the keybord shortcuts of batches
sub refresch_Cb_bas()
	dim i, j, subr(), pom, radek, key, nic, modif
	&apos; smazat stare
	oDIALSH.getcontrol(&quot;Cb_bas&quot;).removeItems(0, oDIALSH.getcontrol(&quot;Cb_bas&quot;).ItemCount )
	&apos; pole procedurami
	subr() = getSubrAsArr()

	for i = 0 to ubound(subr())
		pom = getSubrName(subr(i))    &apos; return only the name from the string of whole procedure
		&apos;make complete name
		radek = replace_(KEYCOMMAND,&quot;^^^&quot;,pom)

		&apos; test the existence of name
		key = nic &apos; assign the empty value
		modif = &quot;&quot; &apos; text form of modifiers
		on error resume next  &apos; inf not exists then it does bug
		key = getKeyEventsByCommand_bug(radek)
		On Error GoTo 0 &apos;restore the error handler

		if not isEmpty(key) then
			if (key(0).Modifiers and 2) = 2 then modif = modif  &amp;  &quot;Ctrl + &quot;
			if (key(0).Modifiers and 4) = 4 then modif = modif  &amp;  &quot;Alt + &quot;
			if (key(0).Modifiers and 1) = 1 then modif = modif  &amp;  &quot;Shift + &quot;
			modif = SHORTCUTlabel  &amp;  modif  &amp;  getStrHotkey(key(0).KeyCode)  &amp;  &quot;&quot;
		end if

		oDIALSH.getcontrol(&quot;Cb_bas&quot;).addItem(pom  &amp;  modif,i)
	next i
end sub


	&apos; put to entered modulte the procedure of basic &quot;basName&quot; that allow the run of batch &quot;batchName&quot;
	&apos; if the &quot;batchName&quot; is chr(13) then the procedure &quot;basName&quot; will be deleted
sub SetBatch_to_BasicSub(batchName, basName)
	dim batchCommand1, sFunction, oLib
	dim i, n, radek, subr()
	on error goto Errorhandler
	batchCommand1 = &quot;^^^1&quot; &amp; cr(1) &amp; &quot; On Error resume next&quot; &amp; cr(1) &amp; &quot; GlobalScope.BasicLibraries.LoadLibrary(&quot;&quot;AltSearch&quot;&quot;)&quot; &amp; cr(1) _
	&amp; &quot; _AltSearch(&quot;&quot;^^^2&quot;&quot;)&quot; &amp; cr(1) &amp; &quot;End sub&quot; &amp; cr(3)

	&apos; put tugether the command
	sFunction = replace_(batchCommand1,&quot;^^^1&quot;,basName)
	sFunction = replace_(sFunction,&quot;^^^2&quot;,batchName)

	&apos; if the name is #13 then delete procedure
	if batchName = chr(13) then sFunction = &quot;&quot;

	subr() = getSubrAsArr() &apos; return the array with used procedures in module BATCHlibrary.BatchModul

	n = ubound(subr())
	i = existSubrName(subr(),basName)
	if i &gt;= 0 then
		&apos; rewrite the current, if it isn&apos;t 1st three of special commands
		if (i&gt;3) then subr(i) = sFunction
	else
		&apos; add to the end
		redim preserve subr(n+1)
		subr(n+1) = sFunction
	end if

	&apos; build result string
	radek = subr(0)  &apos; uvod
	for i = 1 to ubound(subr())
		if subr(i) &lt;&gt; &quot;&quot; then &apos; prazdne jsou smazane, neukladat
			radek = radek &amp; cr(1) &amp; &quot;Sub &quot; &amp; subr(i)
		end if
	next i

	&apos; rewrite to module

	oLib = GlobalScope.BasicLibraries.GetByName(BATCHlibrary)
	oLib.replacebyName(BATCHmodul, radek)
	exit sub

Errorhandler:
	hlaseni1(48, false, false, &quot;SetBatch_to_BasicSub error:    l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: &apos;16=stop 32=? 48=! 64=info; may supress; cancel the activities
end sub


</script:module>