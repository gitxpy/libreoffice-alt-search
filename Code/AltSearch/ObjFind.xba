<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ObjFind" script:language="StarBasic">option explicit

	&apos; return the index of nearest next bookmark after cursor
sub findNextBookm(cur,pol1()) as long
	dim i&amp;, j&amp;, max&amp;
	max = pol1.count-1
	for j = 0 to max
		select case isRegionBefore(cur, pol1(j).anchor)
		case 1 &apos;1st is before 2nd - found
			findNextBookm = j
			exit sub
		case 0 &apos; 1st is after 2nd in same region - continue
		case -1 &apos; different areas
		end select
	next j
	findNextBookm = -1 &apos; no found
end sub


	&apos; return the index of next object for search, or 0
sub findNextObj(pgn,cur,pol1(),pol()) as long
	dim i&amp;, j&amp;, max&amp;
	max = ubound(pol1())
	&apos; search the nearest same or higher page
	for i = 0 to max
		if pol(i) &gt;= pgn then goto stranka
	next i
	&apos; no found
	findNextObj = -1
	exit sub
stranka:
	if pol(i) = pgn then &apos; same page
		for j = i to max &apos; search all anchors on page pgn
			if pol(j)&lt;&gt;pgn then &apos; next page - cursor was probably after last anchor on page
				findNextObj = j
				exit sub
			end if
			select case isRegionBefore(cur,pol1(j).anchor.start)
			case 1 &apos;cursor is before anchor - found
				findNextObj = j
				exit sub
			case 0 &apos; cursor is after anchor and in same area - try next anchor
			case -1 &apos; different areas
				if isBodyTextRegion(cur) then &apos; body text region - 1st anchor is away from text area
					findNextObj = j
					exit sub
				end if
			end select
		next j
		findNextObj = -1 &apos; no found
	else &apos; the nearest higher other page
		findNextObj = i
	end if
end sub


	&apos; return the index of nearest previous bookmark after cursor, or 0
sub findPrevBookm(cur,pol1()) as long
	dim i&amp;, j&amp;, max&amp;
	max = pol1.count-1
	for j = max to 0 step -1
		select case isRegionBefore(pol1(j).anchor,cur)
		case 1 &apos;1st is before 2nd - found
			findPrevBookm = j
			exit sub
		case 0 &apos; 1st is after 2nd in same region - continue
		case -1 &apos; different areas
		end select
	next j
	findPrevBookm = -1 &apos; no found
end sub


	&apos; return the index of previous object for search, or 0
sub findPrevObj(pgn,cur,pol1(),pol()) as long
	dim i&amp;, j&amp;, max&amp;
	max = ubound(pol1())
	&apos; search the nearest same or higher page
	for i = max to 0 step -1
		if pol(i) &lt;= pgn then goto stranka
	next i
	&apos; no found
	findPrevObj = -1
	exit sub
stranka:
	if pol(i) = pgn then &apos; same page
		for j = i to 0 step -1
			if pol(j)&lt;&gt;pgn then &apos; next page - kursor was probably before 1st anchor on page
				findPrevObj = j
				exit sub
			end if
			select case isRegionBefore(pol1(j).anchor.start,cur)
			case 1 &apos;1st is before 2nd - found
				findPrevObj = j
				exit sub
			case 0 &apos; 1st is after 2nd in same region - continue
			case -1 &apos; different areas
				if not isBodyTextRegion(cur) then &apos; body text region - 1st anchor is away from text area
					findPrevObj = j
					exit sub
				end if
			end select
		next j
		findPrevObj = -1 &apos; no found
	else &apos; the nearest higher other page
		findPrevObj = i
	end if
end sub


	&apos; detect current index - find according to position of anchor
	&apos; the max need be set by parameter because if the oAttr() is the collection, then the function ubound() doesn&apos;t funct correctly
sub getIndexByAnchor(oArr(),oCur, max) as long
	dim i&amp;
	for i = 0 to max
		if isRegionStart0(oCur,oArr(i).anchor)  then
			getIndexByAnchor = i
			exit sub
		end if
	next i
	&apos; no found
	getIndexByAnchor = -1
end sub


	&apos; retun the index of unsuccessful searching -1/1 start/end of block, -2/2 start/end of document and set properly prCURS
sub getNoFoundIndex(blockCur) as integer
	prCURS = blockCur.text.createTextCursorByRange(blockCur) &apos; according to block
	if ALTsearchPARAMS.zpet = 1 then
		getNoFoundIndex = -1  &apos; reached the begining of block
		if ALTsearchPARAMS.csele=0 then     &apos; reached the begining of file
			getNoFoundIndex = -2
			prCURS = ALTsearchDOC.text.getEnd()
		end if
	else
		getNoFoundIndex = 1  &apos; reached the end of block
		if ALTsearchPARAMS.csele=0 then     &apos; reached the end of file
			getNoFoundIndex = 2
			prCURS = ALTsearchDOC.text.getStart()
		end if
	end if
end sub


	&apos; pol1() the array with the object of text fields, pol() the array with the numbers of pages
sub getSortFields(pol1(), pol(), druh as string, sort as boolean )
	dim oTFs, oTF, oTF0, pCur, pgno, pgno0, o1,o2
	dim count&amp;, i&amp;, s&amp;, t&amp;
	dim move

	redim TMPPOLE()  &apos; the array of objects
	redim TMPPOLE1() &apos; the array of pages

	if sort then  &apos; save original position of cursor only if sorting
		pCur = oVCURS.text.createTextCursorByRange(oVCURS)
		&apos; vanish the window - it is faster
		ALTsearchDOC.CurrentController.Frame.containerWindow.setVisible(false)
	end if

	count = 0
	oTFs = ALTsearchDOC.getTextFields().createEnumeration()

	Do While oTFs.hasMoreElements()
		oTF = oTFs.nextElement()

		select case druh &apos; select type of array
		case &quot;Annotation&quot;  &apos; only annotations
			if oTF.supportsService(&quot;com.sun.star.text.TextField.Annotation&quot;) then
				goto zapocitej
			else
				goto preskoc
			end if

		case &quot;GetReference&quot;   &apos; only references
			if oTF.supportsService(&quot;com.sun.star.text.TextField.GetReference&quot;) then
				goto zapocitej
			else
				goto preskoc
			end if

		case else  &apos; all arrays excluding notes and references
			if not (oTF.supportsService(&quot;com.sun.star.text.TextField.Annotation&quot;) or oTF.supportsService(&quot;com.sun.star.text.TextField.GetReference&quot;)) then
				goto zapocitej
			else
				goto preskoc
			end if

		end select

zapocitej:
		&apos; add new record to the array of text arrays
		redim preserve pol1(count)
		redim preserve pol(count) &apos; the array of pages

		if sort then
			&apos; detect the number of page and sort to current array
			oVCURS.gotoRange(oTF.anchor.getStart(),false)
			pgno = oVCURS.getPage()
			pol1(count) = oTF
			pol(count) = pgno

		else
			&apos; bez třídění
			pol1(count) = oTF
			pol(count) = 0
		end if

		count= count+1

		if (count mod 17)=0 then &apos; information about the state of reading
			vypisFoundInfo(MSG(40) &amp; &quot;  &quot; &amp; count)
			if FINDCOUNTER &lt; 0 then : sort = false : pol(0)=-1 : end if &apos; not sort, end
		end if
		if i&gt;65000 then
			hlaseni1(64, true, false, &quot;getSortFields:  Je použito více jak 65000 polí, poznámek nebo poznámek pod čarou. Zbytek ignoruji. &quot;) &apos; style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
			goto konec
		end if

preskoc:
	Loop
konec:
	vypisFoundInfo(&quot;&quot;)
	if sort then  &apos; restore original position of visible cursor, only if sorting
		oVCURS.gotoRange(pCur.getStart(),false)
		oVCURS.gotoRange(pCur.getEnd(),true)
		ALTsearchDOC.CurrentController.Frame.containerWindow.setVisible(true)
		if not ALTsearchDIALOG_end then mySetDialFocus  &apos; set focus to dialog else the settings of cursors wil be reseted at next click

		if Ubound(pol()) &gt; 0 then  &apos; it hasn&apos;t sense to sort empty or one-item aray
			&apos; sort according to pages and anchors
			QSortField(pol(),pol1(), 0, Ubound(pol()))
			&apos; sort records in scope of same page
			sortRegionField(pol(),pol1())
		end if
	end if
end sub


	&apos; pol1() array with objects of marks for references, pol() array with the numbers of pages
sub getSortRefMarks(pol1(), pol(), sort as boolean )
	dim oRF, pCur, pgnop, pgno  &apos;, tmppp
	dim count&amp;, i&amp;

	if sort then  &apos; save original position of cursor only if sorting
		pCur = oVCURS.text.createTextCursorByRange(oVCURS)
		&apos; vanish the window - it is faster and not blinking
		ALTsearchDOC.CurrentController.Frame.containerWindow.setVisible(false)
	end if

	count = 0
	oRF = ALTsearchDOC.ReferenceMarks

	for count = 0 to oRF.count-1
		&apos; add new record to the array of text fields
		redim preserve pol1(count)
		redim preserve pol(count) &apos; the array of pages

		if sort then
			&apos; detect the number of page and sort to current array
			oVCURS.gotoRange(oRF(count).anchor.getStart(),false)
			pgno = oVCURS.getPage()
			pol1(count) = oRF(count)
			pol(count) = pgno

		else
			&apos; bez třídění
			pol1(count) = oRF(count)
			pol(count) = 0
		end if

		if (count mod 17)=0 then &apos; information about the state of reading
			vypisFoundInfo(MSG(40) &amp; &quot;  &quot; &amp; count)
			if FINDCOUNTER &lt; 0 then : sort = false : pol(0)=-1 : end if &apos; not sort, end
		end if
		if i&gt;65000 then
			hlaseni1(64, true, false, &quot;getSortFields:  Je použito více jak 65000 značek pro reference. Zbytek ignoruji. &quot;) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
			goto konec
		end if
preskoc:
	next count
konec:
	vypisFoundInfo(&quot;&quot;)
	if sort then  &apos; restore original position of visible cursor, only if sort
		oVCURS.gotoRange(pCur.getStart(),false)
		oVCURS.gotoRange(pCur.getEnd(),true)
		&apos; zobrezit zpátky okno souboru
		ALTsearchDOC.CurrentController.Frame.containerWindow.setVisible(true)
		if not ALTsearchDIALOG_end then mySetDialFocus  &apos; set focus to dialog

		if Ubound(pol()) &gt; 0 then  &apos; it hasn&apos;t sense to sort empty or one-item aray
			&apos; sort according to pages and anchors
			QSortField(pol(),pol1(), 0, Ubound(pol()))
			&apos; sort records in scope of same page
			sortRegionField(pol(),pol1())
		end if
	end if
end sub


	&apos; test whether the entered text range is in main document
sub isBodyTextRegion(anch) as boolean
	isBodyTextRegion = false
	on error goto konec
	&apos; it doesn&apos;t matter how the test will end, decision to elicit the bug = false
	if 0 = ALTsearchDOC.text.compareRegionStarts(ALTsearchDOC.text.getStart(), anch.getStart())  then isBodyTextRegion = true
	isBodyTextRegion = true
konec:
end sub


	&apos; return true if the cursor is before anchor
	&apos; if CHYBA=true then return true although there is a bug of region
sub isCursorBefore(curs,anchor, chyba as boolean) as boolean
	on error goto konec
	isCursorBefore = false
	if 1 = curs.text.compareRegionStarts(curs.getStart(), anchor.getStart())  then isCursorBefore = true
	exit sub
konec:
	if chyba then isCursorBefore = true
end sub


	&apos;detect whether the entered range is inside the region of selected text
sub isInsideOfSelection(rozsah) as boolean
	isInsideOfSelection = false  &apos; it supposed no
	on error goto konec  &apos; if there will be occured the bug of region, then the result if false = away from RANGE, away from ALTSiniSEL
	if ALTsearchPARAMS.csele=0 then
		isInsideOfSelection = true  &apos; if no active the option &quot;find only inside the block&quot; then true
		exit sub
	end if
	&apos;is start of RANGE before the start of ALTSiniSEL ?
	if (1 = ALTSiniSEL.text.compareRegionStarts(rozsah, ALTSiniSEL.getStart)) then exit sub
	&apos; is end of range after the start of ALTSiniSEL ?
	if (-1 = ALTSiniSEL.text.compareRegionEnds(rozsah, ALTSiniSEL.getEnd)) then exit sub
	isInsideOfSelection = true  &apos;
konec:
end sub


	&apos; return 1 whether the curs is before anchor; 0 after one; -1 different regions
sub isRegionBefore(curs,anchor) as integer
	on error goto konec
	isRegionBefore =-1
	if 1 = curs.text.compareRegionStarts(curs.getStart(), anchor.getStart())  then
		isRegionBefore = 1
	else
		isRegionBefore = 0
	end if
	exit sub
konec:
end sub


	&apos; test for the same start of area
sub isRegionStart0(curs,anchor) as boolean
	on error goto konec
	isRegionStart0 = false
	if 0 = curs.text.compareRegionStarts(curs.getStart(), anchor.getStart())  then isRegionStart0 = true
konec:
	&apos; msgbox &quot;bug #59&quot; &apos; .compareRegionStarts() fail, cursor is in TextFrame and the like
end sub


	&apos; is searched substring HLED included in VST and is potentially inside the block?
	&apos; if MODE = 0 then the search is without regard to occurence of searched substring
	&apos; oObj is object with anchor that is potentially tested if is inside the block
sub isSubstrInBlock(oObj, Vst$, Hled$, mode as integer) as boolean
	dim bin as integer, j as long
	isSubstrInBlock = true
	bin = 0
	if ALTsearchPARAMS.kcase=0 then bin = 1  &apos; bin=1 instr(,,bin) ignore lower/uppercases; BIN=0 binary comparison
	j = instr(1,Vst,Hled,bin)
	if hled = &quot;&quot; then j = 0  &apos; else it isnot possible to found empty texts

	if (j&gt;0)or(vst=Hled)or(mode=0) then  &apos; found
		&apos; the search only inside the block
		if ALTsearchPARAMS.csele=0 then exit sub &apos; whole document - found
		&apos;ascertain the anchor - to oAnch
		dim oAnch
		oAnch = oObj.anchor &apos; found object
		&apos;is anchor inside the selection?
		if isInsideOfSelection(oAnch) then exit sub &apos; yes, found inside the block
	end if

	isSubstrInBlock = false
end sub


sub mySetDialFocus  &apos; set focus to dialog
	ALTsearchFINDLAST = &quot;&quot;
	select case GetGuiType  &apos; 1=Win  2=Mac  3=UNIX
		&apos;   case 1 &apos; OS Windows
		&apos;   case 2 &apos; OS MAC
	case 3, 4 &apos; OS Unix, Linux
		&apos; in Linux isn&apos;t functional directly oDIAL.SetFocus() after ...containerWindow.setVisible(true)
		&apos; but after next click are reseted the cursors = special service in BtFindNext
		oDIAL.setVisible(false)
		oDIAL.setVisible(true)
		ALTsearchFINDLAST = oDIAL.getControl(&quot;Cb_find&quot;).text &apos; remember last search - flag for special service in BtFindNext

	case else
		&apos; in Win oDIAL.SetFocus() was functional to version 2.3.1 and the cursor weren&apos;t reseted...
		oDIAL.setFocus()
	end select
end sub


	&apos; after sorting according to number of page;
	&apos; pole() array the have numbers of pages where the anchors are
	&apos; pole1() array that includes object of text field of current pag
Public Sub QSortField(pole As Variant, pole1 as variant, indexD As Long, indexH As Long)
	Dim pivot   As Variant, piv1 as variant &apos; objekt kotvy
	Dim tmpSwap As Variant, tmpSwap1 as variant
	Dim indexD0  As Long
	Dim indexH0   As Long

	indexD0 = indexD &apos;move the data to auxiliary variables
	indexH0 = indexH

	pivot = pole((indexD + indexH) \ 2) &apos;choose the pivot
	piv1 = pole1((indexD + indexH) \ 2) &apos;choose the pivot

	While (indexD0 &lt;= indexH0)
		While ((pole(indexD0)&lt; pivot) And (indexD0 &lt; indexH)) &apos;sort tables
		indexD0 = indexD0 + 1
		Wend

		While ((pivot &lt; pole(indexH0)) And (indexH0 &gt; indexD))
			indexH0 = indexH0 - 1
		Wend

		If (indexD0 &lt;= indexH0) Then
			tmpSwap = pole(indexD0)       : tmpSwap1 = pole1(indexD0)
			pole(indexD0) = pole(indexH0) : pole1(indexD0) = pole1(indexH0)
			pole(indexH0) = tmpSwap       : pole1(indexH0) = tmpSwap1
			indexD0 = indexD0 + 1
			indexH0 = indexH0 - 1
		End If
	Wend

	If (indexD &lt; indexH0) Then QSortField pole, pole1, indexD, indexH0 &apos;recursion for newly emerged arrays
	If (indexD0 &lt; indexH) Then QSortField pole, pole1, indexD0, indexH
End Sub


	&apos; sot the items according the region in aspect of same number of page
	&apos; pol() array of numbers of pages
	&apos; pol1() array with objects of text arrays
sub sortRegionField(pol(),pol1())
	dim s&amp;, t&amp;, i&amp;, z&amp;, k&amp;, max&amp;, pgn&amp;, oTF
	dim zmena
	max = ubound(pol())
	if max&lt;0 then exit sub  &apos; array isn&apos;t
	if pol(0)&lt;0 then exit sub &apos; unsorted array
	i = 0
	z = 0  &apos; initial index of page
	pgn = pol(0)  &apos; number of 1st page
	do while (i &lt;= max)
		if (pol(i) &lt;&gt; pgn)or(i = max) then &apos; next page is different; change of page
			&apos; sort in aspect to this page
			k = i-1
			if i = max then k = i
			&apos; buble sort

			For s = 1 to k - z  &apos; count of repeat of passes
				zmena = false
				For t = z to k-s  &apos; 1 pass
					select case isRegionBefore(pol1(t).anchor.start,pol1(t+1).anchor.start)
					case 1 &apos;1st is before next - OK
						goto neprohodit
					case 0 &apos; 1st is after next in same area - swap
						goto prohodit
					case -1 &apos; different areas
						if isBodyTextRegion(pol1(t+1).anchor.start) then &apos; body region is after some else
							goto prohodit
						end if

					end select

					goto neprohodit
prohodit:
					&apos; swap objects
					oTF = pol1(t)
					pol1(t) = pol1(t+1)
					pol1(t+1) = oTF
					zmena = true
neprohodit:

				Next t
				if not zmena then exit for
			Next s

preskoc:
			&apos; set next page
			z = i : pgn = pol(i)
		end if

		i = i+1
		if (i mod 17)=0 then &apos; information about the state of reading
			vypisFoundInfo(MSG(40) &amp; &quot;  &quot; &amp; i)
		end if

	Loop
	vypisFoundInfo(&quot;&quot;)
end sub


</script:module>