<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Local" script:language="StarBasic">option explicit

Sub Bt_Help &apos;open new window with Help
	dim sv as object, sUrl$, oPath as object, oUrlService as object, sDirTemp$, sDir$, sLang$
	
	sv=GetDefaultContext().getByName(&quot;/singletons/com.sun.star.deployment.PackageInformationProvider&quot;)
	sDir=sv.getPackageLocation(&quot;AltSearch-TomB.addon&quot;) &amp; &quot;/Help&quot; &apos;directory Help

	sLang=&quot;/HelpAltSearch_&quot;&amp; LANGUAGE &amp; &quot;.html&quot; &apos;name of file with current language 
        if not FileExists(sDir &amp; sLang) Then  sLang = &quot;/HelpAltSearch_en.html&quot;

        sUrl=sDir &amp; sLang &apos;html Help file

	if GetGUIType &lt;&gt;1 then &apos;probably there will be /. in url: https://github.com/gitxpy/libreoffice-alt-search/issues/10#issuecomment-2981057374
		rem copy directory Help to other LibreOffice directory	
		oPath= GetDefaultContext().getValueByName(&quot;/singletons/com.sun.star.util.thePathSettings&quot;)
		sDirTemp=oPath.Work_writable  &amp;&quot;/AltSearchHelp&quot;&apos; .Temp_writable = directory temp for users
		FileCopy(sDir, sDirTemp)&apos;always copy directory Help because of new versions of files
		sUrl=sDirTemp &amp; sLang&apos;html file in copied location
	end if
   rem open any of the html files in browser
	oUrlService=CreateUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
	oUrlService.execute(sUrl, &quot;&quot;, com.sun.star.system.SystemShellExecuteFlags.NO_SYSTEM_ERROR_MESSAGE)

End Sub


&apos;macro to open old Help with more files
&apos;Sub Bt_Help &apos;open new window with Help
&apos;	Dim sNewUrl$, oDocc, oNic
&apos;	Dim mArgs(0) as New com.sun.star.beans.PropertyValue
&apos;	dim hled,i, HleDesc, found, pom, velikost
&apos;	velikost = false
&apos;	mArgs(0).Name = &quot;ReadOnly&quot;
&apos;	mArgs(0).Value = true
&apos;	sNewUrl =  HELPPATH &amp; &quot;HelpAltSearch_&quot; &amp; LANGUAGE &amp; &quot;.html&quot;
&apos;	if not FileExists(sNewUrl) then
&apos;		&apos; the file of help in current language isn&apos;t possible to open&quot;
&apos;		&apos; try en help
&apos;		sNewUrl =  HELPPATH &amp; &quot;HelpAltSearch_en.html&quot;
&apos;		if FileExists(sNewUrl) then goto vypis
&apos;		&apos; &quot;File of Help isn&apos;t possible to open&quot;
&apos;		hlaseni1(64, true, false, &quot;Help: &quot; &amp; MSG(17) &amp; chr(10) &amp;  chr(10) &amp;  sNewUrl) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
&apos;		exit sub
&apos;	end if
&apos;
&apos;vypis:
&apos;&apos; 1. search according to Find:
&apos;	if oDIAL.model.step = 1 then  &apos; dialog of search
&apos;
&apos;		i = instr(oDIAL.model.Cb_find.text,&quot;[:::&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;[:::&quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		i = instr(oDIAL.model.Cb_find.text,&quot;[::Grow&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;[::Grow&quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		&apos; search the special characters find
&apos;		pom = oDIAL.model.Cb_find.text
&apos;		pom = rightPast(pom,&quot;[::&quot;)
&apos;		pom = leftTo(pom,&quot;::]&quot;)
&apos;		if pom &lt;&gt; &quot;&quot; then
&apos;			hled  = &quot;[::&quot; &amp; pom &amp; &quot;::]&quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		i = instr(oDIAL.model.Cb_find.text,&quot;||&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;||&quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		&apos; search the reg symbol from Find
&apos;		pom = oDIAL.model.Cb_find.text  &amp;  &quot; &quot;
&apos;		i = instr(pom,&quot;\&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;\&quot; &amp; mid(pom, i &amp; 1,1)
&apos;			velikost = true
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		i = instr(oDIAL.model.Cb_repl.text,&quot;||&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;||&quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		i = instr(oDIAL.model.Cb_repl.text,&quot;&amp;&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;&amp; &quot;
&apos;			goto najdi
&apos;		end if
&apos;
&apos;		&apos; search reg symbol from Replace
&apos;		pom = oDIAL.model.Cb_repl.text  &amp;  &quot; &quot;
&apos;		i = instr(pom,&quot;\&quot;)
&apos;		if i &lt;&gt; 0 then
&apos;			hled  = &quot;\&quot; &amp; mid(pom, i+1,1)
&apos;			velikost = true
&apos;			goto najdi
&apos;		end if
&apos;	else &apos;dialog of batches
&apos;		hled = oDIAL.model.Bt_batch.Label  &apos; &quot;batches &gt;&gt;    - must mention in help?
&apos;	end if
&apos;najdi:
&apos;	oDocc = OpenDocument_(sNewUrl,mArgs())
&apos;	&apos; return the object of entered URL of document, or open it, or create?
&apos;	oDocc.getCurrentController.getFrame.ContainerWindow.setFocus() &apos;fokus do dokumentu
&apos;	&apos; wait until the current fil of help hasn&apos;t focus - else the found expression isn&apos;t displayed
&apos;	i = 0 &apos; safeguard against the eternal cycle
&apos;	do while not oDocc.getCurrentController.frame.isActive()
&apos;		i = i + 1
&apos;		if i&gt;100000 then exit do
&apos;	loop
&apos;	HleDesc = oDocc.createSearchDescriptor()
&apos;	HleDesc.SearchString = hled
&apos;	HleDesc.SearchCaseSensitive = velikost
&apos;	found = oDocc.findFirst(HleDesc)
&apos;	oDocc.getCurrentController.select(found)
&apos;end sub


	&apos; mouse released
sub Bt_Help_mouse_release(oEvt)
	if oEvt.Buttons = 2 then  &apos; right mouse = change of language
		&apos;menu load langue
		dim pom()
		pom() =  array (&quot;Auto&quot;,&quot;cs&quot;,&quot;de&quot;,&quot;en&quot;,&quot;es&quot;,&quot;fr&quot;,&quot;it&quot;,&quot;nl&quot;,&quot;ru&quot;)&apos; true = only used, else all paragraph styles or
		LANGUAGE = getFromList(&quot;Language:&quot;,pom,350,50,100,150)
		LoadLanguage
	end if
end sub


	&apos; for now not used
sub Bt_Help_pressed(oEvt)
	HELPkeyMODIF = 1

end sub


	&apos; search according the name in frame.title , if not found then open new empty file in Writer and set then name frame.title to JMENO
	&apos; return the pointer to object of entered URL of document, or open it, or create?
function getDocumentControl(jmeno,oOrig)as object
	Dim oDesktop As Object, oDocs, oDoc1 As Object
	dim typ
	oDocs = StarDesktop.getComponents().createEnumeration()
	Do While oDocs.hasMoreElements()
		oDoc1 = oDocs.nextElement()

		typ =  GetDocumentType1(oDoc1)
		if (typ=&quot;swriter&quot;) then
			if Ucase(oDoc1.CurrentController.Frame.Title)=ucase(jmeno) then
				getDocumentControl=oDoc1
				exit function
			end if
		end if
	Loop
on local error goto konec:
	oDoc1=StarDesktop.loadComponentFromURL(&quot;private:factory/swriter&quot;,jmeno,0,array())
	oDoc1.CurrentController.Frame.Title = jmeno
	getDocumentControl = oDoc1
	exit function
konec:
	resume next
end function


Function GetDocumentType1(oDocument) as string
	On Local Error GoTo NODOCUMENTTYPE
	If oDocument.SupportsService(&quot;com.sun.star.sheet.SpreadsheetDocument&quot;) Then
		GetDocumentType1 = &quot;scalc&quot;
	ElseIf oDocument.SupportsService(&quot;com.sun.star.text.TextDocument&quot;) Then
		GetDocumentType1 = &quot;swriter&quot;
	ElseIf oDocument.SupportsService(&quot;com.sun.star.text.WebDocument&quot;) Then
		GetDocumentType1 = &quot;swriterweb&quot;
	ElseIf oDocument.SupportsService(&quot;com.sun.star.drawing.DrawingDocument&quot;) Then
		GetDocumentType1 = &quot;sdraw&quot;
	ElseIf oDocument.SupportsService(&quot;com.sun.star.presentation.PresentationDocument&quot;) Then
		GetDocumentType1 = &quot;simpress&quot;
	ElseIf oDocument.SupportsService(&quot;com.sun.star.formula.FormulaProperties&quot;) Then
		GetDocumentType1 = &quot;smath&quot;
	End If
	exit function
NODOCUMENTTYPE:
	If Err &lt;&gt; 0 Then
		GetDocumentType1 = &quot;&quot;
		Resume GOON
GOON:
	End If
End Function


	&apos; return the path to help, it need set properly also the files: HelpPath.xcs and HelpPath.xcu
Function GetHelpDir(idPath as string) as string
	Const sPrefix = &quot;vnd.sun.star.expand:&quot;
	Dim oConfigProvider as object, oRegKey as object
	Dim sHelpDir$
	&apos; * get access to the configuration provider
	oConfigProvider = _
	CreateUnoService(&quot;com.sun.star.configuration.ConfigurationProvider&quot;)

	&apos; * define the node path, where the Image name is stored in the configuration file ImageLocations.xcu
	Dim aNodePath(0) As New com.sun.star.beans.PropertyValue
	aNodePath(0).Name = &quot;nodepath&quot;
	&apos;      aNodePath(0).Value = &quot;name.TomBil.addon.TextClipboard.HelpPath&quot;
	aNodePath(0).Value = idPath

	&apos; * obtain read-only access to that node
	oRegKey = oConfigProvider.createInstanceWithArguments( _
	&quot;com.sun.star.configuration.ConfigurationAccess&quot;, aNodePath() )

	&apos; * retrieving the values
	&apos; * the content was &quot;%origin%/images/Image1.png&quot;
	&apos; * during the installation of the extension, %origin% was replaced
	&apos; *   with &quot;vnd.sun.star.expand:$UNO_USER_PACKAGES_CACHE/uno_packages/&quot;
	sHelpDir$ = oRegKey.getByName(&quot;HelpDir&quot;)

	&apos; * cut the &quot;vnd.sun.star.expand:&quot; protocol from the macrofied Url retrieved from the registry
	sHelpDir = mid(sHelpDir, len(sPrefix)+1)

	&apos; * now the &quot;$UNO_USER_PACKAGES_CACHE&quot; has to be replaced with the real location of the files on your system
	&apos; * this will be done by the MacroExpander
	&apos; * get the default context
	Dim oCtx as object
	oCtx = getProcessServiceManager().DefaultContext

	&apos; * get the macro expander from the default context
	Dim oMacroExpander as object
	oMacroExpander = oCtx.getValueByName(&quot;/singletons/com.sun.star.util.theMacroExpander&quot;)

	&apos; * expand the macrofield expression, which gives us the real location of the files
	sHelpDir = oMacroExpander.ExpandMacros(sHelpDir)
	GetHelpDir = sHelpDir
End Function


	&apos; return the path to the directory .../user/config/, the user should have the accessible to write
function getUserPath as string
	dim cesty as object
	cesty=CreateUnoService(&quot;com.sun.star.util.PathSettings&quot;)
	getUserPath=cesty.UserConfig &amp; &quot;/&quot;
end function


	&apos; read array of cmd for the interpretation of commands
sub initCmd
	cmd( 0,0)=&quot;[Nazev]&quot;     : cmd( 0,1)=&quot;[Name]&quot;
	cmd( 1,0)=&quot;[Hledej]&quot;    : cmd( 1,1)=&quot;[Find]&quot;
	cmd( 2,0)=&quot;[Nahrad]&quot;    : cmd( 2,1)=&quot;[Replace]&quot;
	cmd( 3,0)=&quot;[Parametry]&quot; : cmd( 3,1)=&quot;[Parameters]&quot;
	cmd( 4,0)=&quot;[Prikaz]&quot;    : cmd( 4,1)=&quot;[Command]&quot;
	cmd( 5,0)=&quot;[Konec]&quot;     : cmd( 5,1)=&quot;[End]&quot;
	cmd( 6,0)=&quot;Velikost&quot;      :  cmd( 6,1)=&quot;MatchCase&quot;
	cmd( 7,0)=&quot;CelaSlova&quot;     :  cmd( 7,1)=&quot;WholeWord&quot;
	cmd( 8,0)=&quot;StylyOdst&quot;     :  cmd( 8,1)=&quot;ParaStyles&quot;
	cmd( 9,0)=&quot;Regularni&quot;     :  cmd( 9,1)=&quot;Regular&quot;
	cmd(10,0)=&quot;SoucasnyVyber&quot; :  cmd(10,1)=&quot;CurrSelection&quot;
	cmd(11,0)=&quot;Pozpatku&quot;      :  cmd(11,1)=&quot;Backwards&quot;
	cmd(12,0)=&quot;BezHlaseni&quot;    :  cmd(12,1)=&quot;MsgOff&quot;
	cmd(13,0)=&quot;Hledat&quot;        :  cmd(13,1)=&quot;Find&quot;
	cmd(14,0)=&quot;HledatVse&quot;     :  cmd(14,1)=&quot;FindAll&quot;
	cmd(15,0)=&quot;Nahradit&quot;      :  cmd(15,1)=&quot;Replace&quot;
	cmd(16,0)=&quot;NahraditVse&quot;   :  cmd(16,1)=&quot;ReplaceAll&quot;
	cmd(17,0)=&quot;Spocitat&quot;      :  cmd(17,1)=&quot;Count&quot;
	&apos;v1.2
	cmd(18,0)=&quot;BezSouhrnu&quot;  :  cmd(18,1)=&quot;NoSummary&quot;
	&apos;v1.3
	cmd(19,0)=&quot;ZachovatVelkaPismena&quot;  :  cmd(19,1)=&quot;PreserveCapital&quot;
	cmd(20,0)=&quot;&quot;  :  cmd(20,1)=&quot;&quot;
end sub


</script:module>