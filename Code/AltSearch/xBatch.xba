<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="xBatch" script:language="StarBasic">option explicit

public const SCRIPTfile = &quot;AltSearchScript&quot;
public const SCRIPTeditor = &quot;AltSearchEditor.ini&quot;  &apos; the name of file from one is run the shell for the edit of batch
Public const SUBTAB = &quot;    &quot;  &apos; replace the tabulators to spaces
public CMD(20,1) as string  &apos; array with the commands for interpretation
dim LNG as byte &apos; index of language for batch execution - 0 Czech, 1 - English and probably also other languages

 &apos;master commands
Public Const CMD_xName = 0
Public Const CMD_xFind = 1
Public Const CMD_xReplace = 2
Public Const CMD_xParameters = 3
Public Const CMD_xCommand = 4
Public Const CMD_xEnd = 5
 &apos;Parameters
Public Const CMD_MatchCase = 6
Public Const CMD_WholeWord = 7
Public Const CMD_ParaStyles = 8
Public Const CMD_Regular = 9
Public Const CMD_CurrSelection = 10
Public Const CMD_Backwards = 11
Public Const CMD_MsgOff = 12
Public Const CMD_NoSummary = 18
Public Const CMD_PreserveCapital = 19
 &apos;Command
Public Const CMD_Find = 13
Public Const CMD_FindAll = 14
Public Const CMD_Replace = 15
Public Const CMD_ReplaceAll = 16
Public Const CMD_Count = 17


function isCmd(aCmd as String, id as integer) as Boolean
  isCmd = (aCmd= ucase( CMD(id,0))) or (aCmd = ucase( CMD(id,1)))
end function


dim oDIA_Choice as object &apos;  dialog asking  Append/Rename/Replace
dim bDIRESULT$


	&apos; open the soubor with saved changes for edit
Sub Bt_edit(oEvt)
	dim iNum as integer, path as string
	dim radek$, goFile$, pom$
	dim errmisto
	dim outPole(), n

	&apos; if the user file with the path to text editor doesn&apos;t exist then copy the pattern
	path = USERPATH &amp; SCRIPTeditor
	on error goto problem

	if not fileexists(path) then zkopiruj(HELPPATH &amp; SCRIPTeditor, path)
	if not fileexists(path) then goto problem

ZkusZnovu:
	errmisto = &quot;&quot;
	&apos; load file from array
	n = -1
	iNum = Freefile
	Open path For Input As #iNum
	While not eof(#iNum)  &apos; cycle for all lines
		Line Input #iNum, radek
		n = n +1
		redim preserve outPole(n)  &apos; add empty record to output array
		outPole(n) = radek
	wend &apos; cycle for all lines
	Close #iNum

	errmisto = &quot;shell&quot;  &apos; identifier of place of bug
	shell  trim(outPole(0)), 1, &quot;&quot;&quot;&quot; &amp; convertFromURL(USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;) &amp; &quot;&quot;&quot;&quot;
	exit sub

	problem:

	if (errmisto = &quot;shell&quot;) then  &apos; file not found
		pom = inputbox(MSG(28),MSG(11) &amp; VERSION, outPole(0))
		if pom = &quot;&quot; then exit sub
		outPole(0) = trim(pom)
		&apos; save output array
		Open path For Output As #iNum
		for n = 0 to ubound(outPole())
			Print #iNum, outPole(n)
		next n
		Close #iNum
		resume ZkusZnovu
	else
		hlaseni1(48, false, false, &quot;Bt_edit:  &quot; &amp; chr(10) &amp; MSG(26) &amp; chr(10) &amp; path &amp; chr(10) &amp; &quot;l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
	end if
End Sub


	&apos; appraisal of buttons of dialog rewrite/add (D_choice)
sub Bt_oDia(oEvt)
  bDIRESULT = oEvt.source.model.tag
  oDIA_Choice.endexecute()
end sub


	&apos; actualize the list of saved scripts
Sub Bt_refr
	&apos; load new
	Refresch &apos; refresh list
End Sub


	&apos; run saved script
Sub Bt_run(optional oEvt)
	dim sf, inStream, inFile

	dim radek$, prCmd$, prVal$, path$, hl0$, hl1$, jmeno as string
	dim kopiruj as boolean
	dim outPole(), comPole(), i, n as long  &apos; array of lines with the batch to save to file, count of records
	dim poccmd  &apos; pocet příkazů v dávce
	dim transfer as boolean
	dim noSummary as boolean

	HledamDisp(true) &apos; not accessible during search

	transfer = false
	If (not IsMissing(oEvt)) then
		if (oEvt.source.model.tag=&quot;T&quot;) then transfer = true
	end if

	on error goto problem
	&apos; load the batch from file to outpole()
	n = -1
	kopiruj = false
	jmeno = ucase(trim(replace_(LASTNAME, chr(9), SUBTAB))) &apos; cancel possible spaces and tabs
	hl0 = ucase(CMD(CMD_xName,0)) &amp; jmeno
	hl1 = ucase(CMD(CMD_xName,1)) &amp; jmeno

	path = USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;
	if not fileexists(Path) then goto problem
	&apos; open of input file in UTF-8
	sf = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	inStream = sf.openFileRead(path)
	inFile = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
	inFile.InputStream = inStream
	inFile.Encoding = &quot;UTF-8&quot;

	Do While not inFile.IsEOF
		radek = inFile.readLine
		getCmdVal(radek, prCmd, prVal, true)    &apos; load command and text behind one
		prCmd = ucase(prCmd)
		prVal = trim(ucase(prVal))

		&apos; end if the end of batch-script is found
		if kopiruj and ( isCmd(prCmd, CMD_xName) or isCmd(prCmd, CMD_xEnd) )  then
			exit do &apos; end of batch
		end if

		&apos; if the name of batch is found then copy
		if (not kopiruj) and ( (prCmd &amp; prVal=hl0)or(prCmd &amp; prVal=hl1) ) then
			kopiruj = true
		end if

		&apos; add to array
		if kopiruj and (prCmd&lt;&gt;&quot;&quot;) and ( not( isCmd(prCmd, CMD_xName) )  ) then
			&apos; add line to output
			n = n +1
			redim preserve outPole(n)  &apos; add empty record to output array
			outPole(n) = radek
		end if
	loop

	&apos; close file
	inStream.closeInput
	inFile.closeInput

	batREPLCOUNT = 0
	QUITMODE = false  &apos; not suppress the report

	cursorinit(true) &apos; actualize the cursors
&apos; access all choices to could set entered choices:
	with  oDIAL.model
		.Ch_case.enabled = true  &apos; make accessible
		.Ch_word.enabled = true  &apos; make accessible
		.Ch_styl.enabled = true  &apos; make accessible
		.Ch_reg.enabled = true  &apos; make accessible
		.Ch_csele.enabled = true  &apos; make accessible
		.Ch_zpet.enabled = true  &apos; make accessible
	end with

	poccmd = 0
	&apos; all lines of batch
	for n = 0 to ubound(outPole())
		if FINDCOUNTER &lt; -99 then goto konec &apos; possibility to cancel the batch and finish
		getCmdVal(outPole(n), prCmd, prVal, false)    &apos; load command and text behind one

		select case ucase(prCmd)
		case ucase(CMD(1,0)),ucase(CMD(1,1))  &apos; Find
			oDIAL.model.Cb_find.text = prVal

		case ucase(CMD(2,0)),ucase(CMD(2,1)) &apos; Replace
			oDIAL.model.Cb_repl.text = prVal

		case ucase(CMD(3,0)),ucase(CMD(3,1)) &apos; Parameters
		&apos;cancel superfluous spaces and tabulators between commands
		prVal = replace_(prVal,chr(9), SUBTAB)
		prVal = trim(prVal)
		while instr(prval, &quot;  &quot;)&gt; 0
			prVal = replace_(prVal, &quot;  &quot;,&quot; &quot;)
			wend
			compole()=ArrayOutOfString_(prVal, &quot; &quot;)  &apos; load the array of commands
			&apos; execute all commands of settings of parameter of search
			with oDIAL.model
				.Ch_case.state = 0  :  .Ch_case.enabled = true
				.Ch_case.state = 0  :  .Ch_preservecap.enabled = true
				.Ch_word.state = 0  :  .Ch_word.enabled = true
				.Ch_styl.state = 0  :  .Ch_styl.enabled = true
				.Ch_reg.state = 0   :  .Ch_reg.enabled = true
				.Ch_csele.state = 0 :  .Ch_csele.enabled = true
				.Ch_zpet.state = 0  :  .Ch_zpet.enabled = true
				QUITMODE = false  &apos; not suppress the the report
				noSummary = false  &apos; without summary report about the count of changes at finish

				for i = 0 to ubound(compole())
					select case ucase(comPole(i))
					case ucase(CMD(6,0)),ucase(CMD(6,1)) &apos; Size
						.Ch_case.state = 1

					case ucase(CMD(7,0)),ucase(CMD(7,1)) &apos;  Whole words
						.Ch_word.state = 1

					case ucase(CMD(8,0)),ucase(CMD(8,1)) &apos; para styles
						.Ch_styl.state = 1

					case ucase(CMD(9,0)),ucase(CMD(9,1)) &apos; regexp
						.Ch_reg.state = 1

					case ucase(CMD(10,0)),ucase(CMD(10,1)) &apos; current selection
						.Ch_csele.state = 1

					case ucase(CMD(11,0)),ucase(CMD(11,1)) &apos; backward
						.Ch_zpet.state = 1

					case ucase(CMD(12,0)),ucase(CMD(12,1)) &apos; without report
						QUITMODE = true  &apos;suppress the report

					case ucase(CMD(18,0)),ucase(CMD(18,1)) &apos; NoSummary
						noSummary = true

					case ucase(CMD(19,0)),ucase(CMD(19,1)) &apos;
						.Ch_preservecap.state = 1

					case &quot;&quot;  &apos; empty - do nothing

					case else
&apos;unknown parameter:
						hlaseni1(64, true, false, &quot;Bt_run:  Unknown parameter:  &quot; &amp;  comPole(i)) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
					end select
				next i
			end with

  case ucase(CMD(CMD_xCommand,0)), ucase(CMD(CMD_xCommand,1))
bugcmd:
		&apos; if it is activated via the button &quot;Transfer&quot; then do nothing
		if transfer then
			poccmd = poccmd + 1 &apos; count of commands in one line
		else
			&apos;cancel superfluous spaces and tabulators between commands
			prVal = replace_(prVal,chr(9), SUBTAB)
			prVal = trim(prVal)
			while instr(prval, &quot;  &quot;)&gt; 0
				prVal = replace_(prVal, &quot;  &quot;,&quot; &quot;)
				wend
				compole()=ArrayOutOfString_(prVal, &quot; &quot;)  &apos; load the array of commands
				&apos; execute all commands
				for i = 0 to ubound(compole())
					if FINDCOUNTER &lt; -99 then goto konec &apos; -999 cancel the batch and end
					select case ucase(comPole(i))
					case ucase(CMD(13,0)), ucase(CMD(13,1)) &apos;Find
						BtFindNext

					case ucase(CMD(14,0)), ucase(CMD(14,1)) &apos; FindAll
						BtFindAll

					case ucase(CMD(15,0)), ucase(CMD(15,1)) &apos; Replace
						BtReplace

					case ucase(CMD(16,0)), ucase(CMD(16,1)) &apos; ReplaceAll
						BtReplaceAll

					case ucase(CMD(17,0)), ucase(CMD(17,1)) &apos; Count
						BtCount

					case &quot;&quot;  &apos; empty - do nothing
					case else &apos; unknown command
						hlaseni1(64, false, false, &quot;Bt_run:  Unknown command:  &quot; &amp;  comPole(i)) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
					end select
				next i
			end if &apos; tranfer
		case else
&apos; unknown command:
			hlaseni1(64, false, false, &quot;Bt_run:  Unknown command:  &quot; &amp; prCmd) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities

		end select
	next n  &apos; all lines of batch

	&apos; do nothing, only transfer the parameters to the arrays find, replace...
	if  transfer then
		&apos; switch to dialog Find
		Bt_swfind

		&apos; Warning: the batch includes more subsequent groups of F&amp;R. But only the parameters of last group were transfered.
		if poccmd &gt; 1 then hlaseni1(64, false, false, MSG(35)) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities

	else

		konec:  &apos; write report

		radek = replace_(MSG(29),&quot;^^1&quot;,trim(LASTNAME))
		radek = replace_(radek,&quot;^^2&quot;,cstr(batREPLCOUNT))

		&apos; watch for more documents
		if MULTIfileBatchRUN and (COUNTBATCHsel = 0) then MULTIfleBatchREPORT = &quot; &quot;  &amp;  cr(1)  &amp;  LASTNAME  &amp;  cr(3)  &amp;  ltrim(MSG(31))  &amp;  cr(1) &apos; name of batch and the text &quot;Number of replace:&quot;
		if MULTIfileBatchRUN then MULTIfleBatchREPORT = MULTIfleBatchREPORT  &amp;  cr(1)  &amp;  cstr(batREPLCOUNT)  &amp;  &quot;           &quot;  &amp;  LISTofWFILES(COUNTBATCH).Title

		&apos; batch ... ended, there were  ... exchanges.
		if (not noSummary) and (not MULTIfleBatchDISABLEMSG) then hlaseni1(64, false, false, radek) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities

	end if

	QUITMODE = false  &apos; not suppress the report
	REPLCOUNT = 0
	batREPLCOUNT = 0

	HledamDisp(false) &apos; unaccessible buttons during search

	exit sub

problem:
	&apos; cannot open file...
	hlaseni1(48, false, false, &quot;Bt_run:  &quot; &amp; MSG(26) &amp; chr(10) &amp; Path &amp; chr(10) &amp; &quot;l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
	&apos; more complicated service of bugs for possibility to close the stream and files
	Resume problem1
problem1:
	on error resume next
	inStream.closeInput
	inFile.closeInput
	goto konec
End Sub


	&apos; save to new or add to existed record
Sub Bt_save2
	SaveBatch(2)
End Sub


	&apos; switch to base dialog Find
Sub Bt_swfind
	oDIAL.Model.Step = 1
End Sub


sub ChoiceDialog(vyzva) as String
	bDIRESULT = &quot;&quot;  &apos; it supposes esc, cancel
	oDIA_Choice.model.Lb3.label = vyzva
	oDIA_Choice.execute
	ChoiceDialog = bDIRESULT
end sub


sub ExistName(byval nam) as boolean
	dim pom()
	dim i as integer
	pom() = oDIAL.getControl(&quot;Lb_names&quot;).getItems()
	nam = trim(ucase(nam))
	For i = Lbound(pom()) to Ubound(pom())
		If nam = trim(ucase(pom(i))) Then
			ExistName = True
			Exit sub
		End if
	Next i
	ExistName = false
end sub


	&apos; in the variables prCmd, prVal returns main command (fro example [Find]) and value (text after command)
sub getCmdVal(radek as string, prCmd as string, prVal as string, triming as boolean)
	dim i as long
	dim pom as string
	pom = replace_(radek,chr(9),SUBTAB)  &apos; replace tabulators with 4 spaces
	pom = trim(pom)
	prCmd = &quot;&quot;
	prVal = &quot;&quot;
	if left(pom,1) = &quot;[&quot; then &apos; probably
		prCmd = leftTo(pom,&quot;]&quot;) &amp; &quot;]&quot;
		if triming then
			prVal = rightPast(pom,&quot;]&quot;)
		else  &apos; for find &amp; replace strings nait need keep the space on the margins of string
			prVal = rightPast(radek,&quot;]&quot;)
		end if
	end if
end sub


	&apos; return the string of set properties
sub getOptionString as string
	dim vysl as string
	vysl = &quot;  &quot;  &amp;  CMD(12,LNG)  &amp;  &quot;  &quot;
	With oDIAL.model
	if (.Ch_case.state = 1)and(.Ch_case.enabled) then vysl = vysl  &amp;  CMD(6,LNG)  &amp;  &quot;  &quot;
	if (.Ch_word.state = 1)and(.Ch_word.enabled) then vysl = vysl  &amp;  CMD(7,LNG)  &amp;  &quot;  &quot;
	if (.Ch_styl.state = 1)and(.Ch_styl.enabled) then vysl = vysl  &amp;  CMD(8,LNG)  &amp;  &quot;  &quot;
	if (.Ch_reg.state = 1) and(.Ch_reg.enabled)  then vysl = vysl  &amp;  CMD(9,LNG)  &amp;  &quot;  &quot;
	&apos;v1.3
	if (.Ch_preservecap.state = 1) and(.Ch_preservecap.enabled)  then vysl = vysl  &amp;  CMD(19,LNG)  &amp;  &quot;  &quot;

	if (.Ch_csele.state = 1)and(.Ch_csele.enabled) then vysl = vysl  &amp;  CMD(10,LNG)  &amp;  &quot;  &quot;
	if (.Ch_zpet.state = 1)and(.Ch_zpet.enabled) then vysl = vysl  &amp;  CMD(11,LNG)  &amp;  &quot;  &quot;
	End with
	
	getOptionString = vysl
end  sub


	&apos; initialize the module Batch if it is needed
	&apos; return the name of script for save
sub iniBatch as string
	if not ISbatchINIT then  &apos; initialize the Batch module if isn&apos;t
		ISbatchINIT = true
		initCmd &apos; load commands
		&apos; copy pattern file of batches after new installation, else nothing
		if not fileexists(USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;) then
			if fileexists(HELPPATH &amp; SCRIPTfile &amp; &quot;_&quot; &amp; LANGUAGE &amp; &quot;.txt&quot;) then  &apos; copy the national if exists
				zkopiruj(HELPPATH &amp; SCRIPTfile &amp; &quot;_&quot; &amp; LANGUAGE &amp; &quot;.txt&quot;,USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;)
			else
				&apos; copy at least the English
				&apos; potential problems with opening a copying of English could solve the procedure Zkopiruj()
				zkopiruj(HELPPATH &amp; SCRIPTfile &amp; &quot;_en.txt&quot;,USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;)
			end if
		end if
		Refresch &apos; refresh list
		LASTNAME=MSG(24)
&apos; offer the default name:
		iniBatch = LASTNAME
	else
		iniBatch = LASTNAME &apos; last used name of batch
	end if
end sub


	&apos; fill the variable LASTNAME of name of batch on that was clicked
sub lastNameSynchro(oEvt)
	LASTNAME = oEvt.source.SelectedItem
end sub


	&apos; save current values Find, replace, parameters as batch
sub SaveBatch(no as byte)
	dim pom  as string
	if not ISbatchINIT then initCmd &apos; if module Batch still ins&apos;t initialized then load the commands

zmenit:
	pom = inputbox(oDIAL.getcontrol(&quot;Lb1&quot;).AccessibleContext.text &amp; &quot;   &quot; &amp; zkratitNa(oDIAL.model.Cb_find.text,58) &amp; chr(10) _
	&amp; oDIAL.getcontrol(&quot;T_repl&quot;).AccessibleContext.text &amp; &quot;   &quot; &amp; zkratitNa(oDIAL.model.Cb_repl.text,58) &amp; chr(10) _
	&amp; oDIAL.getcontrol(&quot;Fr1&quot;).AccessibleContext.TitledBorderText &amp; zkratitNa(getOptionString,58) _
	&amp; &quot;        &quot; &amp; mid(CMD(CMD_xCommand,LNG),2, len(CMD(CMD_xCommand,LNG))-2) &amp; &quot;:  &quot; &amp; CMD(16,LNG) , MSG(27), iniBatch())

	if pom = &quot;&quot; then exit sub
	if ExistName(pom) then
		select case ChoiceDialog(replace_(MSG(25),&quot;^^&quot;,pom))
		case &quot;Rename&quot;  &apos; save with other name
			goto zmenit

		case &quot;Append&quot;  &apos; add to end of batch
			saveOptionToFile(2, pom, oDIAL.model.Cb_find.text, oDIAL.model.Cb_repl.text, getOptionString, CMD(16,LNG))

		case &quot;Replace&quot; &apos; rewrite existing batch
			saveOptionToFile(1, pom, oDIAL.model.Cb_find.text, oDIAL.model.Cb_repl.text, getOptionString, CMD(16,LNG))
		end select
	else
		saveOptionToFile(0, pom, oDIAL.model.Cb_find.text, oDIAL.model.Cb_repl.text, getOptionString, CMD(16,LNG))
	end if
end sub


	&apos; refresh list
sub Refresh
	dim sf, inStream, inFile
	dim radek, prCmd$, prVal$, path as string

	&apos; delete old list
	oDIAL.getcontrol(&quot;Lb_names&quot;).removeItems(0,oDIAL.getcontrol(&quot;Lb_names&quot;).itemCount)

	on error goto problem
	path = USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;
	if not fileexists(Path) then goto problem


	&apos; open of input file in UTF-8
	sf = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	inStream = sf.openFileRead(path)
	inFile = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
	inFile.InputStream = inStream
	inFile.Encoding = &quot;UTF-8&quot;

	While not inFile.IsEOF
		radek = inFile.readLine
		getCmdVal(radek, prCmd, prVal, true)    &apos; load command and text behind one
		if prCmd &lt;&gt; &quot;&quot; then &apos; it is command
			prCmd = Ucase(prCmd)
			if ( isCmd(prCmd, CMD_xName) ) then
				oDIAL.getControl(&quot;Lb_names&quot;).addItem(prVal,oDIAL.getControl(&quot;Lb_names&quot;).ItemCount)
			end if
		end if
	wend

	&apos; close the file
	inStream.closeInput
	inFile.closeInput
	exit sub
problem:
	&apos; cannot open file...
	hlaseni1(48, false, false, &quot;Refresh:  &quot; &amp; MSG(26) &amp; chr(10) &amp; Path &amp; chr(10) &amp; &quot;l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
	&apos; more complicated service of bugs for possibility to close the stream and files
	Resume problem1
problem1:
	on error resume next
	inStream.closeInput
	inFile.closeInput
end sub


	&apos; save the parameters of search to file named NAM
sub saveOptionToFile(mode as byte, byval nam$, byval find$, byval sRepl$, byval para$, byval comm$)
	dim radek, path, tmp as string
	dim prCmd as string, prVal as string &apos; work variables returned the main command (for example [Find]) and the value
	dim outPole(), n as long  &apos; array of lines for save to file, count of records
	dim bstep as integer  &apos; step of execution: 0 ; 1=copy1 2=insCmd 3=insCont 4=copy2
	dim copy1 as boolean, copy1skip as boolean, insCmd as boolean, insCont as boolean, copy2 as boolean
	dim hledam, hl0, hl1  as string
	dim sf, ioStream, ioFile
	dim CRLF

	CRLF = chr(13) &amp; chr(10) &apos; character of end of line for save the file

	hledam = trim(replace_(nam,chr(9),SUBTAB))  &apos; text of name of batch
	nam = &quot;&quot; &amp; CMD(CMD_xName,LNG) &amp; &quot; &quot; &amp; hledam  &apos; clean the name from spaces and tabs
	find = &quot;  &quot; &amp; CMD(CMD_xFind,LNG) &amp; find
	sRepl = &quot;  &quot; &amp; CMD(CMD_xReplace,LNG) &amp; sRepl
	para = &quot;  &quot; &amp; CMD(CMD_xParameters,LNG) &amp; &quot; &quot; &amp; para
	comm = &quot;  &quot; &amp; CMD(CMD_xCommand,LNG) &amp; &quot; &quot; &amp; comm

	select case mode
	case 0 &apos;Add before [End]
		hledam = &quot;&quot;        &apos; if there is &quot;&quot; the the name isn&apos;t found but up to [end]
		copy1 = false       &apos; make the content after found [Name]
		copy1skip = false  &apos; jump the rewrite to output
		insCmd = true     &apos; insert the name of command
		insCont = true     &apos; put the content of saved parameters
		copy2 = true       &apos; rewrite the rest to the end of file

	case 1 &apos; rewrite - save content after found name
		&apos;     hledam = &quot;&quot;       &apos; if there is &quot;&quot; the the name isn&apos;t found but up to end
		copy1 = true       &apos; make the content after found [Name]
		copy1skip = true   &apos; jump the rewrite to output
		insCmd = false     &apos; insert the name of command
		insCont = true     &apos; put the content of saved parameters
		copy2 = true       &apos; rewrite the rest to the end of file

	case 2 &apos; find the name of existed batch and save content to its end
		&apos;     hledam = &quot;&quot;       &apos; if there is &quot;&quot; the the name isn&apos;t found but up to end
		copy1 = true       &apos; make the content after found [Name]
		copy1skip = false  &apos; jump the rewrite to output
		insCmd = false     &apos; insert the name of command
		insCont = true     &apos; put the content of saved parameters
		copy2 = true       &apos; rewrite the rest to the end of file

	end select

	hl0 = ucase(CMD(CMD_xName,0)) &amp; ucase(hledam)
	hl1 = ucase(CMD(CMD_xName,1)) &amp; ucase(hledam)

	on error goto problem
	path = USERPATH &amp; SCRIPTfile &amp; &quot;.txt&quot;
	n = -1
	bstep = 0
	if not fileexists(Path) then goto problem

	&apos; open of input file in UTF-8
	sf = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	ioStream = sf.openFileRead(path)
	ioFile = createUnoService(&quot;com.sun.star.io.TextInputStream&quot;)
	ioFile.InputStream = ioStream
	ioFile.Encoding = &quot;UTF-8&quot;

	While not ioFile.IsEOF  &apos; cycle for all lines
		radek = ioFile.readLine
		getCmdVal(radek, prCmd, prVal, true)    &apos; load command and text behind one
		prCmd = ucase(prCmd)
		prVal = trim(ucase(prVal))

		nextStep:   &apos; if the step is jumped then not oad next line
		select case bstep
		case 0  &apos; step 0 rewrites the lines while isn&apos;t found searched name of batch or [end]
			&apos; add line to output
			n = n +1
			redim preserve outPole(n)  &apos; add empty record to output array
			outPole(n) = radek
			&apos; if the name or [end] is found then switch to next step
			if (prCmd &amp; prVal=hl0)or(prCmd &amp; prVal=hl1)or(prCmd=ucase(CMD(5,0)))or(prCmd=ucase(CMD(5,1))) then  &apos; CMD(5,x)=[end]
				bstep = 1
				&apos; if the new batch is added before end then redelete [end]
				if mode=0 then goto nextStep &apos; next step without next line
			end if

		case 1 &apos; write/jump the lines while isn&apos;t found next [name] or [end]
			if copy1 then
				&apos; found next command [name] or [end], so there will be the addition before one
				if (  isCmd(prCmd, CMD_xName) or isCmd(prCmd, CMD_xEnd)  )  then
					bstep = 2
					goto nextStep &apos; next step without next line
				end if
				if not copy1skip then &apos; write to output if it is enabled
					&apos; write line to output
					n = n +1
					redim preserve outPole(n)  &apos; add empty record to output array
					outPole(n) = radek
				end if

			else  &apos; not processed, jump to next step
				bstep = 2
				goto nextStep &apos; next step without next line
			end if

		case 2  &apos; insert command [Name] + text of name
			if InsCmd then
				if mode=0 then
					outPole(n) = nam
				else
					&apos; add line to output
					n = n+2 &apos; 2 lines
					redim preserve outPole(n)  &apos; add empty record to output array
					outPole(n-1) = &quot;&quot;
					outPole(n) = nam
				end if
			end if
			bstep = 3
			goto nextStep &apos; next step eithout the reading of line

		case 3  &apos; insert content
			if InsCont then
				&apos; add line to output
				n = n+5 &apos;  lines
				redim preserve outPole(n)  &apos; add empty lines to output array
				&apos;             outPole(n-5) = &quot;&quot;
				outPole(n-4) = find
				outPole(n-3) = sRepl
				outPole(n-2) = para
				outPole(n-1) = comm
				outPole(n) = &quot;&quot;

			end if
			bstep = 4
			goto nextStep &apos; next step eithout the reading of line

		case 4  &apos; copy the rest of file
			if copy2 then
				&apos; add line to output
				n = n +1
				redim preserve outPole(n)  &apos; add empty record to output array
				outPole(n) = radek
			end if
		end select

	wend &apos; cycle for all lines

	&apos; close the file
	ioStream.closeInput
	ioFile.closeInput

	&apos; save output array
	&apos; open of output file
	ioStream = sf.openFileWrite(path)
	ioFile = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	ioFile.OutputStream = ioStream
	ioFile.Encoding = &quot;UTF-8&quot;

	for n = 0 to ubound(outPole())
		ioFile.writeString(outPole(n) &amp; CRLF)
	next n

	ioStream.closeOutput
	ioFile.closeOutput

	&apos; if there was new name then refresh list
	if mode = 0 then Refresh
	exit sub
problem:
	&apos; cannot open file...
	hlaseni1(48, false, false, &quot;SaveOptionToFile:  &quot; &amp; MSG(26) &amp; chr(10) &amp; Path &amp; chr(10) &amp; &quot;l. &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
	&apos; more complicated service of bugs for possibility to close the stream and files
	Resume problem1
problem1:
	on error resume next
	ioStream.closeInput
	ioFile.closeInput
	ioStream.closeOutput
	ioFile.closeOutput
end sub


	&apos; rewrite after doubleclick or enter the item to selective array Tf_name
sub SelectItem(oEvt)
	Bt_run(oEvt)
end sub


	&apos; copy the source to target, announce the problem
sub Zkopiruj(zdroj, cil)
	on error goto problem
	FileCopy zdroj, cil
	exit sub
problem:
	&apos; cannot open file...
	hlaseni1(48, false, false, &quot;Zkopiruj:  &quot; &amp; MSG(26) &amp; chr(10) &amp; zdroj &amp; chr(10) &amp; chr(10) &amp; cil &amp; chr(10) &amp; &quot;line: &quot; &amp; erl &amp; &quot;:  &quot; &amp; Error$) &apos;  style: 16=stop 32=? 48=! 64=info; may suppress; cancel the activities
end sub


</script:module>